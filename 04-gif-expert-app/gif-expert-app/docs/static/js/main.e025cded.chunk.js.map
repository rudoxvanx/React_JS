{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","prototype","PropTypes","func","isRequired","getGifts","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","console","log","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"wPAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAKVC,mBAAS,IALC,mBAKvCC,EALuC,KAK3BC,EAL2B,KAqB9C,OACI,oCACE,0BAAMC,SAbS,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAG3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAc,OAOf,2BACMO,KAAK,OACLC,MAAOT,EACPU,SApBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,aA4B/BZ,EAAYe,UAAY,CACpBd,c,OAAce,EAAUC,KAAKC,Y,2BCpCpBC,EAAQ,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEdC,EAFc,0FAE2EC,UAAUH,GAFrF,sBAGDI,MAAMF,GAHL,cAGdG,EAHc,gBAOKA,EAAKC,OAPV,uBAOXC,EAPW,EAOXA,KAMHC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAGD,EAAIC,GACPC,MAAMF,EAAIE,MACVV,IAAG,UAACQ,EAAIG,cAAL,aAAC,EAAYC,iBAAiBZ,QAjBrB,kBAqBbM,GArBa,4CAAH,sDCFN,SAASO,EAAT,GAAqC,EAAfJ,GAAgB,IAAbC,EAAY,EAAZA,MAAMV,EAAM,EAANA,IAC1C,OACI,yBAAKc,UAAU,0CAEX,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAIA,ICDD,SAASO,EAAT,GAA8B,IAAZnB,EAAW,EAAXA,SAAW,ECEhB,SAACA,GAAc,IAAD,EACZlB,mBAAS,CAC/ByB,KAAK,GACLa,SAAQ,IAH0B,mBAC/BC,EAD+B,KACxBC,EADwB,KA2BtC,OArBAC,qBAAU,WACNxB,EAASC,GACJwB,MAAK,SAAAC,GACFC,YAAW,WACPC,QAAQC,IAAIH,GACZH,EAAS,CACLf,KAAKkB,EACLL,SAAQ,MAEd,UAEZ,CAACpB,IAUIqB,ED3BuBQ,CAAa7B,GAA/Ba,EAF4B,EAEjCN,KAAYa,EAFqB,EAErBA,QAmBnB,OACI,oCACI,wBAAIJ,UAAU,qCAAqChB,GAClDoB,GAAW,uBAAGJ,UAAU,oCAAb,WACZ,yBAAKA,UAAU,aAEHH,EAAOJ,KAAI,SAAAC,GAAG,OACV,kBAACK,EAAD,eACIe,IAAKpB,EAAIC,IACLD,SE/BpC,IAiCeqB,EAjCM,WAAM,MAIfjD,mBAAS,CAAC,cAJK,mBAGhBkD,EAHgB,KAGJnD,EAHI,KAYvB,OACI,6BACI,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEA,4BAEQmD,EAAWvB,KAAI,SAAAT,GAAQ,OACnB,kBAACmB,EAAD,CACIW,IAAK9B,EACLA,SAAYA,UCvBxCiC,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e025cded.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n    //console.log(props.setCategories);\r\n\r\n    //const { setCategories } = props.setCategories;\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n        //console.log('Submit hecho');\r\n        if(inputValue.trim().length > 2){\r\n           //A este componente no se le paso el el arreglo de categorias\r\n           //pero se puede acceder a el por medio de una callback\r\n           setCategories(cats => [inputValue,...cats]);\r\n           setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n          <form onSubmit={handleSubmit}>\r\n          <input \r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}/>     \r\n          </form> \r\n          \r\n        </>\r\n\r\n        //<button onClick = {handleInputChange}>Agregar</button>\r\n    )\r\n}\r\n\r\nAddCategory.prototype = {\r\n    setCategories:PropTypes.func.isRequired\r\n}","\r\n//Esta funcion no regresa los gifs regresara una promesa que regresa los\r\n//gifs\r\n\r\nexport const getGifts = async (category) => {\r\n    \r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=Bw9yA2U4QGXcdYIXEUkpgJu9OIRJMr4z&q=${encodeURI(category)}&limit=10`;\r\n    const resp = await fetch(url);\r\n\r\n\r\n\r\n    const  { data }  = await resp.json();\r\n    /*console.log(data);\r\n    const  [a] = data;\r\n    const {images} = a;\r\n    console.log(images);*/\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id:img.id,\r\n            title:img.title,\r\n            url:img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n    /*console.log(gifs);\r\n    setImages(gifs);*/\r\n}\r\n","import React from 'react'\r\n\r\nexport default function GifGridItem({id,title,url}) {\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            {/*{img.title}*/}\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","//import React, { useState,useEffect } from 'react'\r\nimport React from 'react'\r\nimport { getGifts } from '../helpers/getGifs';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport GifGridItem from './GifGridItem';\r\n\r\nexport default function GifGrid({category}) {\r\n\r\n    const {data:images,loading} = useFetchGifs(category);\r\n\r\n\r\n    //console.log(loading);\r\n    /*const [images, setImages] = useState([])\r\n    \r\n    useEffect(() => {\r\n        //getGifts();\r\n        getGifts(category)\r\n        .then(setImages);\r\n        //.then(imgs => setImages(imgs));\r\n    },[category])*/\r\n   \r\n\r\n   \r\n    //getGifts();\r\n\r\n    /*Custom Hooks es reutilizar logica de tal manera que sea sencillo\r\n    utilizarla nuevamente*/\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n            {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\r\n            <div className=\"card-grid\">\r\n                    {\r\n                        images.map(img => ( \r\n                            <GifGridItem \r\n                                key={img.id}\r\n                                {...img}/>\r\n                        ))\r\n                    }\r\n            </div>\r\n          \r\n            {/**/}\r\n            {/*loading?'Cargando....':'Data cargando'*/}\r\n        </>\r\n        /*images.map(({id,title}) => {\r\n                        return <li key = {id}>{title}</li>\r\n                        <GifGridItem  />\r\n        })*/\r\n    );\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifts } from \"../helpers/getGifs\"\r\n\r\n\r\n/*Extraccion de una peque침a logica \r\n  que se va implementar para realizar una\r\n  peque침a l칩gica \r\n*/\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading:true\r\n    })\r\n\r\n    useEffect(() => {\r\n        getGifts(category)\r\n            .then(imgs => {\r\n                setTimeout(() => {\r\n                    console.log(imgs);\r\n                    setState({\r\n                        data:imgs,\r\n                        loading:false\r\n                    });\r\n                },3000);\r\n            })\r\n    },[category])\r\n    \r\n    /*setTimeout(()=>{\r\n        setState({\r\n            data:[1,2,3,4,5,6,7],\r\n            loading:false\r\n        })\r\n  \r\n    },3000);*/\r\n\r\n    return state;\r\n}\r\n\r\n\r\n//La importacion de react es para retornar codigo en JSX","import React, {useState} from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\n/*Ordenar la estructura de archivos segun la necesidad de la aplicaci칩n*/\r\nconst GifExpertApp = () => {\r\n    //const categories = [\"One Punch\",\"Samurai X\",\"Dragon Ball\"]\r\n  \r\n    const [categories, setCategories] = \r\n            useState([\"One Punch\"]);\r\n    \r\n    /*const handleAdd = () => {\r\n    const new_category = 'Pokemon'\r\n\r\n    setCategories([...categories,new_category]);\r\n\r\n    } */\r\n    return (\r\n        <div>\r\n            <h2>GifExportApp</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr/>\r\n          \r\n            <ul>\r\n                {   //Expresion de JS que retorne un valor\r\n                    categories.map(category => (\r\n                        <GifGrid \r\n                            key={category} \r\n                            category = {category}\r\n                        />\r\n                    ))\r\n                }\r\n                \r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n \n    <GifExpertApp />,\n \n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}